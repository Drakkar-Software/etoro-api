/* 
 * eToro System API
 *
 * The System API provides general data on the full eToro System
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Auto-Complete
        /// </summary>
        /// <remarks>
        /// The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns></returns>
        void GetAutoComplete (string prefix, decimal? instrumentCount, decimal? userCount);

        /// <summary>
        /// Auto-Complete
        /// </summary>
        /// <remarks>
        /// The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAutoCompleteWithHttpInfo (string prefix, decimal? instrumentCount, decimal? userCount);
        /// <summary>
        /// Daily Price Change
        /// </summary>
        /// <remarks>
        /// The daily price change method shows the daily price change of the instruments in the system. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns></returns>
        void GetDailyPriceChange (string sort, decimal? page = null, decimal? pageSize = null);

        /// <summary>
        /// Daily Price Change
        /// </summary>
        /// <remarks>
        /// The daily price change method shows the daily price change of the instruments in the system. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDailyPriceChangeWithHttpInfo (string sort, decimal? page = null, decimal? pageSize = null);
        /// <summary>
        /// Insights
        /// </summary>
        /// <remarks>
        /// The Insights method provides an insight on the trends inside the eToro system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns></returns>
        void GetInsights (string insightType, string instrumentIds = null);

        /// <summary>
        /// Insights
        /// </summary>
        /// <remarks>
        /// The Insights method provides an insight on the trends inside the eToro system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInsightsWithHttpInfo (string insightType, string instrumentIds = null);
        /// <summary>
        /// Market Events
        /// </summary>
        /// <remarks>
        /// The Market Events method returns information on significant market events. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns></returns>
        void GetMarketEvents (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null);

        /// <summary>
        /// Market Events
        /// </summary>
        /// <remarks>
        /// The Market Events method returns information on significant market events. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMarketEventsWithHttpInfo (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Auto-Complete
        /// </summary>
        /// <remarks>
        /// The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAutoCompleteAsync (string prefix, decimal? instrumentCount, decimal? userCount);

        /// <summary>
        /// Auto-Complete
        /// </summary>
        /// <remarks>
        /// The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAutoCompleteAsyncWithHttpInfo (string prefix, decimal? instrumentCount, decimal? userCount);
        /// <summary>
        /// Daily Price Change
        /// </summary>
        /// <remarks>
        /// The daily price change method shows the daily price change of the instruments in the system. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDailyPriceChangeAsync (string sort, decimal? page = null, decimal? pageSize = null);

        /// <summary>
        /// Daily Price Change
        /// </summary>
        /// <remarks>
        /// The daily price change method shows the daily price change of the instruments in the system. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDailyPriceChangeAsyncWithHttpInfo (string sort, decimal? page = null, decimal? pageSize = null);
        /// <summary>
        /// Insights
        /// </summary>
        /// <remarks>
        /// The Insights method provides an insight on the trends inside the eToro system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInsightsAsync (string insightType, string instrumentIds = null);

        /// <summary>
        /// Insights
        /// </summary>
        /// <remarks>
        /// The Insights method provides an insight on the trends inside the eToro system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInsightsAsyncWithHttpInfo (string insightType, string instrumentIds = null);
        /// <summary>
        /// Market Events
        /// </summary>
        /// <remarks>
        /// The Market Events method returns information on significant market events. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMarketEventsAsync (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null);

        /// <summary>
        /// Market Events
        /// </summary>
        /// <remarks>
        /// The Market Events method returns information on significant market events. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMarketEventsAsyncWithHttpInfo (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Auto-Complete The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns></returns>
        public void GetAutoComplete (string prefix, decimal? instrumentCount, decimal? userCount)
        {
             GetAutoCompleteWithHttpInfo(prefix, instrumentCount, userCount);
        }

        /// <summary>
        /// Auto-Complete The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAutoCompleteWithHttpInfo (string prefix, decimal? instrumentCount, decimal? userCount)
        {
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DefaultApi->GetAutoComplete");
            // verify the required parameter 'instrumentCount' is set
            if (instrumentCount == null)
                throw new ApiException(400, "Missing required parameter 'instrumentCount' when calling DefaultApi->GetAutoComplete");
            // verify the required parameter 'userCount' is set
            if (userCount == null)
                throw new ApiException(400, "Missing required parameter 'userCount' when calling DefaultApi->GetAutoComplete");

            var localVarPath = "/AutoComplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Prefix", prefix)); // query parameter
            if (instrumentCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentCount", instrumentCount)); // query parameter
            if (userCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserCount", userCount)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Auto-Complete The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAutoCompleteAsync (string prefix, decimal? instrumentCount, decimal? userCount)
        {
             await GetAutoCompleteAsyncWithHttpInfo(prefix, instrumentCount, userCount);

        }

        /// <summary>
        /// Auto-Complete The auto-complete method allows you to create an \&quot;auto-complete\&quot; like widget with both users and instruments in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">The search term you will be executing</param>
        /// <param name="instrumentCount">The number of instruments in the result set</param>
        /// <param name="userCount">The number of users in the result set</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAutoCompleteAsyncWithHttpInfo (string prefix, decimal? instrumentCount, decimal? userCount)
        {
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DefaultApi->GetAutoComplete");
            // verify the required parameter 'instrumentCount' is set
            if (instrumentCount == null)
                throw new ApiException(400, "Missing required parameter 'instrumentCount' when calling DefaultApi->GetAutoComplete");
            // verify the required parameter 'userCount' is set
            if (userCount == null)
                throw new ApiException(400, "Missing required parameter 'userCount' when calling DefaultApi->GetAutoComplete");

            var localVarPath = "/AutoComplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Prefix", prefix)); // query parameter
            if (instrumentCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentCount", instrumentCount)); // query parameter
            if (userCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserCount", userCount)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Daily Price Change The daily price change method shows the daily price change of the instruments in the system. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns></returns>
        public void GetDailyPriceChange (string sort, decimal? page = null, decimal? pageSize = null)
        {
             GetDailyPriceChangeWithHttpInfo(sort, page, pageSize);
        }

        /// <summary>
        /// Daily Price Change The daily price change method shows the daily price change of the instruments in the system. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDailyPriceChangeWithHttpInfo (string sort, decimal? page = null, decimal? pageSize = null)
        {
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling DefaultApi->GetDailyPriceChange");

            var localVarPath = "/DailyPriceChange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyPriceChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Daily Price Change The daily price change method shows the daily price change of the instruments in the system. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDailyPriceChangeAsync (string sort, decimal? page = null, decimal? pageSize = null)
        {
             await GetDailyPriceChangeAsyncWithHttpInfo(sort, page, pageSize);

        }

        /// <summary>
        /// Daily Price Change The daily price change method shows the daily price change of the instruments in the system. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">The order of the response regarding the daily change</param>
        /// <param name="page">The current page. If omitted the default will be the first page (optional)</param>
        /// <param name="pageSize">The number of results in each page. If omitted, the page size will default to 20 (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDailyPriceChangeAsyncWithHttpInfo (string sort, decimal? page = null, decimal? pageSize = null)
        {
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling DefaultApi->GetDailyPriceChange");

            var localVarPath = "/DailyPriceChange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyPriceChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Insights The Insights method provides an insight on the trends inside the eToro system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns></returns>
        public void GetInsights (string insightType, string instrumentIds = null)
        {
             GetInsightsWithHttpInfo(insightType, instrumentIds);
        }

        /// <summary>
        /// Insights The Insights method provides an insight on the trends inside the eToro system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInsightsWithHttpInfo (string insightType, string instrumentIds = null)
        {
            // verify the required parameter 'insightType' is set
            if (insightType == null)
                throw new ApiException(400, "Missing required parameter 'insightType' when calling DefaultApi->GetInsights");

            var localVarPath = "/Insights/{InsightType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insightType != null) localVarPathParams.Add("InsightType", this.Configuration.ApiClient.ParameterToString(insightType)); // path parameter
            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInsights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Insights The Insights method provides an insight on the trends inside the eToro system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInsightsAsync (string insightType, string instrumentIds = null)
        {
             await GetInsightsAsyncWithHttpInfo(insightType, instrumentIds);

        }

        /// <summary>
        /// Insights The Insights method provides an insight on the trends inside the eToro system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insightType">What type of insight we wish to see</param>
        /// <param name="instrumentIds">Comma delimited string containing instrument ids which will be explicitly returned (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInsightsAsyncWithHttpInfo (string insightType, string instrumentIds = null)
        {
            // verify the required parameter 'insightType' is set
            if (insightType == null)
                throw new ApiException(400, "Missing required parameter 'insightType' when calling DefaultApi->GetInsights");

            var localVarPath = "/Insights/{InsightType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insightType != null) localVarPathParams.Add("InsightType", this.Configuration.ApiClient.ParameterToString(insightType)); // path parameter
            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInsights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Market Events The Market Events method returns information on significant market events. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns></returns>
        public void GetMarketEvents (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null)
        {
             GetMarketEventsWithHttpInfo(minDate, maxDate, page, pageSize);
        }

        /// <summary>
        /// Market Events The Market Events method returns information on significant market events. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMarketEventsWithHttpInfo (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null)
        {

            var localVarPath = "/MarketEvents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            if (maxDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxDate", maxDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Market Events The Market Events method returns information on significant market events. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMarketEventsAsync (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null)
        {
             await GetMarketEventsAsyncWithHttpInfo(minDate, maxDate, page, pageSize);

        }

        /// <summary>
        /// Market Events The Market Events method returns information on significant market events. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minDate">Minimum date for events. In case it is omitted it will be 10 days (optional)</param>
        /// <param name="maxDate">Maximum date for events. In case it is missing the current timestamp will be used (optional)</param>
        /// <param name="page">The current page. If omitted the default will by 1 (optional)</param>
        /// <param name="pageSize">The pagesize. If omitted the default page size will be 10 (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMarketEventsAsyncWithHttpInfo (string minDate = null, string maxDate = null, decimal? page = null, decimal? pageSize = null)
        {

            var localVarPath = "/MarketEvents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            if (maxDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxDate", maxDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
