/* 
 * eToro Trading API
 *
 * The Trading API allows the development of the full trading capabilities in the eToro platform
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test CreateExitOrder
        /// </summary>
        [Test]
        public void CreateExitOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //Object body = null;
            //instance.CreateExitOrder(system, body);
            
        }
        /// <summary>
        /// Test DeleteExitOrder
        /// </summary>
        [Test]
        public void DeleteExitOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //decimal? orderId = null;
            //instance.DeleteExitOrder(system, orderId);
            
        }
        /// <summary>
        /// Test DeleteOrder
        /// </summary>
        [Test]
        public void DeleteOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //decimal? orderId = null;
            //Object body = null;
            //instance.DeleteOrder(system, orderId, body);
            
        }
        /// <summary>
        /// Test DoLogin
        /// </summary>
        [Test]
        public void DoLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DoLogin();
            
        }
        /// <summary>
        /// Test DoLogout
        /// </summary>
        [Test]
        public void DoLogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionKey = null;
            //instance.DoLogout(subscriptionKey);
            
        }
        /// <summary>
        /// Test EditPosition
        /// </summary>
        [Test]
        public void EditPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //decimal? positionId = null;
            //instance.EditPosition(system, positionId);
            
        }
        /// <summary>
        /// Test GetCredit
        /// </summary>
        [Test]
        public void GetCreditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //instance.GetCredit(system);
            
        }
        /// <summary>
        /// Test GetEquity
        /// </summary>
        [Test]
        public void GetEquityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //instance.GetEquity(system);
            
        }
        /// <summary>
        /// Test GetEquityHistory
        /// </summary>
        [Test]
        public void GetEquityHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //string period = null;
            //string minDate = null;
            //string maxDate = null;
            //string username = null;
            //instance.GetEquityHistory(system, period, minDate, maxDate, username);
            
        }
        /// <summary>
        /// Test GetExitOrders
        /// </summary>
        [Test]
        public void GetExitOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //instance.GetExitOrders(system);
            
        }
        /// <summary>
        /// Test GetFees
        /// </summary>
        [Test]
        public void GetFeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //string instrumentIds = null;
            //string ocpApimSubscriptionKey = null;
            //instance.GetFees(system, instrumentIds, ocpApimSubscriptionKey);
            
        }
        /// <summary>
        /// Test GetInstrumentMetadata
        /// </summary>
        [Test]
        public void GetInstrumentMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //string instrumentIds = null;
            //string subscriptionKey = null;
            //string ocpApimSubscriptionKey = null;
            //instance.GetInstrumentMetadata(system, instrumentIds, subscriptionKey, ocpApimSubscriptionKey);
            
        }
        /// <summary>
        /// Test GetOrders
        /// </summary>
        [Test]
        public void GetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //instance.GetOrders(system);
            
        }
        /// <summary>
        /// Test GetTradeHistory
        /// </summary>
        [Test]
        public void GetTradeHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //string minDate = null;
            //int? page = null;
            //int? pageSize = null;
            //string ocpApimSubscriptionKey = null;
            //string xToken_ = null;
            //string xCsrfToken = null;
            //instance.GetTradeHistory(system, minDate, page, pageSize, ocpApimSubscriptionKey, xToken_, xCsrfToken);
            
        }
        /// <summary>
        /// Test GetTrades
        /// </summary>
        [Test]
        public void GetTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //string subscriptionKey = null;
            //string ocpApimSubscriptionKey = null;
            //instance.GetTrades(system, subscriptionKey, ocpApimSubscriptionKey);
            
        }
        /// <summary>
        /// Test PlaceOrder
        /// </summary>
        [Test]
        public void PlaceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string system = null;
            //Object body = null;
            //instance.PlaceOrder(system, body);
            
        }
    }

}
