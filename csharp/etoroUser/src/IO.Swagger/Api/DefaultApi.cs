/* 
 * User
 *
 * The User API provides data on a user including trading statistics
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Trade/History/Aggregates
        /// </summary>
        /// <remarks>
        /// The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns></returns>
        void GetAggregatesHistory (string username, string period = null);

        /// <summary>
        /// Trade/History/Aggregates
        /// </summary>
        /// <remarks>
        /// The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAggregatesHistoryWithHttpInfo (string username, string period = null);
        /// <summary>
        /// Copiers/History
        /// </summary>
        /// <remarks>
        /// The API returns the daily number of copiers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns></returns>
        void GetCopiersHistory (string username, string minDate = null);

        /// <summary>
        /// Copiers/History
        /// </summary>
        /// <remarks>
        /// The API returns the daily number of copiers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCopiersHistoryWithHttpInfo (string username, string minDate = null);
        /// <summary>
        /// CopySimulation
        /// </summary>
        /// <remarks>
        /// The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns></returns>
        void GetCopySimulationData (string username, string period, bool? assetAllocation = null);

        /// <summary>
        /// CopySimulation
        /// </summary>
        /// <remarks>
        /// The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCopySimulationDataWithHttpInfo (string username, string period, bool? assetAllocation = null);
        /// <summary>
        /// Daily Gain
        /// </summary>
        /// <remarks>
        /// The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns></returns>
        void GetDailyGain (string username, string type, string minDate, string maxDate);

        /// <summary>
        /// Daily Gain
        /// </summary>
        /// <remarks>
        /// The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDailyGainWithHttpInfo (string username, string type, string minDate, string maxDate);
        /// <summary>
        /// Monthly Gain
        /// </summary>
        /// <remarks>
        /// This API retrieves the monthly and yearly gains of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns></returns>
        void GetGains (string username);

        /// <summary>
        /// Monthly Gain
        /// </summary>
        /// <remarks>
        /// This API retrieves the monthly and yearly gains of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGainsWithHttpInfo (string username);
        /// <summary>
        /// Copiers/Live
        /// </summary>
        /// <remarks>
        /// This API returns the number of live copiers by country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns></returns>
        void GetLiveCopiers (string username);

        /// <summary>
        /// Copiers/Live
        /// </summary>
        /// <remarks>
        /// This API returns the number of live copiers by country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLiveCopiersWithHttpInfo (string username);
        /// <summary>
        /// RiskScore/Live
        /// </summary>
        /// <remarks>
        /// The Risk Score Live API call returns data on the live customer risk score
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns></returns>
        void GetLiveRiskScore (string username);

        /// <summary>
        /// RiskScore/Live
        /// </summary>
        /// <remarks>
        /// The Risk Score Live API call returns data on the live customer risk score
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLiveRiskScoreWithHttpInfo (string username);
        /// <summary>
        /// RiskScore/History
        /// </summary>
        /// <remarks>
        /// This API retrieves the historical risk score of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns></returns>
        void GetRiskHistory (string username, string minDate = null);

        /// <summary>
        /// RiskScore/History
        /// </summary>
        /// <remarks>
        /// This API retrieves the historical risk score of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRiskHistoryWithHttpInfo (string username, string minDate = null);
        /// <summary>
        /// Discovery
        /// </summary>
        /// <remarks>
        /// The API returns discovery values for a specific user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns></returns>
        void GetUserDiscoveryData (string username, string period = null);

        /// <summary>
        /// Discovery
        /// </summary>
        /// <remarks>
        /// The API returns discovery values for a specific user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserDiscoveryDataWithHttpInfo (string username, string period = null);
        /// <summary>
        /// Social/Followers
        /// </summary>
        /// <remarks>
        /// The API returns the number of followers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns></returns>
        void GetUserFollowers (string username);

        /// <summary>
        /// Social/Followers
        /// </summary>
        /// <remarks>
        /// The API returns the number of followers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserFollowersWithHttpInfo (string username);
        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns></returns>
        void GetUserInfo (string username);

        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserInfoWithHttpInfo (string username);
        /// <summary>
        /// PortfolioSummary
        /// </summary>
        /// <remarks>
        /// The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns></returns>
        void GetUserPortfolioSummary (string username);

        /// <summary>
        /// PortfolioSummary
        /// </summary>
        /// <remarks>
        /// The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserPortfolioSummaryWithHttpInfo (string username);
        /// <summary>
        /// VisualPortfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns></returns>
        void GetUserVisualPortfolio (string username, decimal? top);

        /// <summary>
        /// VisualPortfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserVisualPortfolioWithHttpInfo (string username, decimal? top);
        /// <summary>
        /// Multiple Discovery
        /// </summary>
        /// <remarks>
        /// This API returns discovery values for multiple users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns></returns>
        void GetUsersDiscoveryData (string usernames, string period, string fields = null);

        /// <summary>
        /// Multiple Discovery
        /// </summary>
        /// <remarks>
        /// This API returns discovery values for multiple users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUsersDiscoveryDataWithHttpInfo (string usernames, string period, string fields = null);
        /// <summary>
        /// Multiple Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns></returns>
        void GetUsersInfo (string userNames = null);

        /// <summary>
        /// Multiple Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUsersInfoWithHttpInfo (string userNames = null);
        /// <summary>
        /// Multiple Visual Portfolio
        /// </summary>
        /// <remarks>
        /// This API returns the visual portfolio on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns></returns>
        void GetUsersVisualPortfolio (string userNames = null);

        /// <summary>
        /// Multiple Visual Portfolio
        /// </summary>
        /// <remarks>
        /// This API returns the visual portfolio on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUsersVisualPortfolioWithHttpInfo (string userNames = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Trade/History/Aggregates
        /// </summary>
        /// <remarks>
        /// The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAggregatesHistoryAsync (string username, string period = null);

        /// <summary>
        /// Trade/History/Aggregates
        /// </summary>
        /// <remarks>
        /// The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregatesHistoryAsyncWithHttpInfo (string username, string period = null);
        /// <summary>
        /// Copiers/History
        /// </summary>
        /// <remarks>
        /// The API returns the daily number of copiers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCopiersHistoryAsync (string username, string minDate = null);

        /// <summary>
        /// Copiers/History
        /// </summary>
        /// <remarks>
        /// The API returns the daily number of copiers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCopiersHistoryAsyncWithHttpInfo (string username, string minDate = null);
        /// <summary>
        /// CopySimulation
        /// </summary>
        /// <remarks>
        /// The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCopySimulationDataAsync (string username, string period, bool? assetAllocation = null);

        /// <summary>
        /// CopySimulation
        /// </summary>
        /// <remarks>
        /// The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCopySimulationDataAsyncWithHttpInfo (string username, string period, bool? assetAllocation = null);
        /// <summary>
        /// Daily Gain
        /// </summary>
        /// <remarks>
        /// The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDailyGainAsync (string username, string type, string minDate, string maxDate);

        /// <summary>
        /// Daily Gain
        /// </summary>
        /// <remarks>
        /// The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDailyGainAsyncWithHttpInfo (string username, string type, string minDate, string maxDate);
        /// <summary>
        /// Monthly Gain
        /// </summary>
        /// <remarks>
        /// This API retrieves the monthly and yearly gains of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGainsAsync (string username);

        /// <summary>
        /// Monthly Gain
        /// </summary>
        /// <remarks>
        /// This API retrieves the monthly and yearly gains of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGainsAsyncWithHttpInfo (string username);
        /// <summary>
        /// Copiers/Live
        /// </summary>
        /// <remarks>
        /// This API returns the number of live copiers by country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLiveCopiersAsync (string username);

        /// <summary>
        /// Copiers/Live
        /// </summary>
        /// <remarks>
        /// This API returns the number of live copiers by country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveCopiersAsyncWithHttpInfo (string username);
        /// <summary>
        /// RiskScore/Live
        /// </summary>
        /// <remarks>
        /// The Risk Score Live API call returns data on the live customer risk score
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLiveRiskScoreAsync (string username);

        /// <summary>
        /// RiskScore/Live
        /// </summary>
        /// <remarks>
        /// The Risk Score Live API call returns data on the live customer risk score
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveRiskScoreAsyncWithHttpInfo (string username);
        /// <summary>
        /// RiskScore/History
        /// </summary>
        /// <remarks>
        /// This API retrieves the historical risk score of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetRiskHistoryAsync (string username, string minDate = null);

        /// <summary>
        /// RiskScore/History
        /// </summary>
        /// <remarks>
        /// This API retrieves the historical risk score of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRiskHistoryAsyncWithHttpInfo (string username, string minDate = null);
        /// <summary>
        /// Discovery
        /// </summary>
        /// <remarks>
        /// The API returns discovery values for a specific user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserDiscoveryDataAsync (string username, string period = null);

        /// <summary>
        /// Discovery
        /// </summary>
        /// <remarks>
        /// The API returns discovery values for a specific user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserDiscoveryDataAsyncWithHttpInfo (string username, string period = null);
        /// <summary>
        /// Social/Followers
        /// </summary>
        /// <remarks>
        /// The API returns the number of followers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserFollowersAsync (string username);

        /// <summary>
        /// Social/Followers
        /// </summary>
        /// <remarks>
        /// The API returns the number of followers of a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserFollowersAsyncWithHttpInfo (string username);
        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserInfoAsync (string username);

        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserInfoAsyncWithHttpInfo (string username);
        /// <summary>
        /// PortfolioSummary
        /// </summary>
        /// <remarks>
        /// The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserPortfolioSummaryAsync (string username);

        /// <summary>
        /// PortfolioSummary
        /// </summary>
        /// <remarks>
        /// The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserPortfolioSummaryAsyncWithHttpInfo (string username);
        /// <summary>
        /// VisualPortfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserVisualPortfolioAsync (string username, decimal? top);

        /// <summary>
        /// VisualPortfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserVisualPortfolioAsyncWithHttpInfo (string username, decimal? top);
        /// <summary>
        /// Multiple Discovery
        /// </summary>
        /// <remarks>
        /// This API returns discovery values for multiple users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUsersDiscoveryDataAsync (string usernames, string period, string fields = null);

        /// <summary>
        /// Multiple Discovery
        /// </summary>
        /// <remarks>
        /// This API returns discovery values for multiple users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersDiscoveryDataAsyncWithHttpInfo (string usernames, string period, string fields = null);
        /// <summary>
        /// Multiple Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUsersInfoAsync (string userNames = null);

        /// <summary>
        /// Multiple Info
        /// </summary>
        /// <remarks>
        /// This API returns general information on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersInfoAsyncWithHttpInfo (string userNames = null);
        /// <summary>
        /// Multiple Visual Portfolio
        /// </summary>
        /// <remarks>
        /// This API returns the visual portfolio on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUsersVisualPortfolioAsync (string userNames = null);

        /// <summary>
        /// Multiple Visual Portfolio
        /// </summary>
        /// <remarks>
        /// This API returns the visual portfolio on a list of users
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersVisualPortfolioAsyncWithHttpInfo (string userNames = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Trade/History/Aggregates The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns></returns>
        public void GetAggregatesHistory (string username, string period = null)
        {
             GetAggregatesHistoryWithHttpInfo(username, period);
        }

        /// <summary>
        /// Trade/History/Aggregates The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAggregatesHistoryWithHttpInfo (string username, string period = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetAggregatesHistory");

            var localVarPath = "/{Username}/Trade/History/Aggregates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregatesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Trade/History/Aggregates The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAggregatesHistoryAsync (string username, string period = null)
        {
             await GetAggregatesHistoryAsyncWithHttpInfo(username, period);

        }

        /// <summary>
        /// Trade/History/Aggregates The trading history aggregates retrieves aggregate data on the trading of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to get the aggregate data on</param>
        /// <param name="period">The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt; (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregatesHistoryAsyncWithHttpInfo (string username, string period = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetAggregatesHistory");

            var localVarPath = "/{Username}/Trade/History/Aggregates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregatesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Copiers/History The API returns the daily number of copiers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns></returns>
        public void GetCopiersHistory (string username, string minDate = null)
        {
             GetCopiersHistoryWithHttpInfo(username, minDate);
        }

        /// <summary>
        /// Copiers/History The API returns the daily number of copiers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCopiersHistoryWithHttpInfo (string username, string minDate = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetCopiersHistory");

            var localVarPath = "/{Username}/Copiers/History";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCopiersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Copiers/History The API returns the daily number of copiers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCopiersHistoryAsync (string username, string minDate = null)
        {
             await GetCopiersHistoryAsyncWithHttpInfo(username, minDate);

        }

        /// <summary>
        /// Copiers/History The API returns the daily number of copiers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which I would like to get the copier history</param>
        /// <param name="minDate">The minimum date for the response. The date should be formatted as YYYY/MM/DD (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCopiersHistoryAsyncWithHttpInfo (string username, string minDate = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetCopiersHistory");

            var localVarPath = "/{Username}/Copiers/History";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCopiersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// CopySimulation The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns></returns>
        public void GetCopySimulationData (string username, string period, bool? assetAllocation = null)
        {
             GetCopySimulationDataWithHttpInfo(username, period, assetAllocation);
        }

        /// <summary>
        /// CopySimulation The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCopySimulationDataWithHttpInfo (string username, string period, bool? assetAllocation = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetCopySimulationData");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling DefaultApi->GetCopySimulationData");

            var localVarPath = "/{Username}/CopySimulation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            if (assetAllocation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AssetAllocation", assetAllocation)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCopySimulationData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// CopySimulation The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCopySimulationDataAsync (string username, string period, bool? assetAllocation = null)
        {
             await GetCopySimulationDataAsyncWithHttpInfo(username, period, assetAllocation);

        }

        /// <summary>
        /// CopySimulation The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to simulate</param>
        /// <param name="period">The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata &lt;a href&#x3D;\&quot;docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\&quot;&gt;StatsPeriods API&lt;/a&gt;</param>
        /// <param name="assetAllocation">Return information on daily asset allocation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCopySimulationDataAsyncWithHttpInfo (string username, string period, bool? assetAllocation = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetCopySimulationData");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling DefaultApi->GetCopySimulationData");

            var localVarPath = "/{Username}/CopySimulation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            if (assetAllocation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AssetAllocation", assetAllocation)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCopySimulationData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Daily Gain The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns></returns>
        public void GetDailyGain (string username, string type, string minDate, string maxDate)
        {
             GetDailyGainWithHttpInfo(username, type, minDate, maxDate);
        }

        /// <summary>
        /// Daily Gain The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDailyGainWithHttpInfo (string username, string type, string minDate, string maxDate)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'minDate' is set
            if (minDate == null)
                throw new ApiException(400, "Missing required parameter 'minDate' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'maxDate' is set
            if (maxDate == null)
                throw new ApiException(400, "Missing required parameter 'maxDate' when calling DefaultApi->GetDailyGain");

            var localVarPath = "/{Username}/DailyGain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Type", type)); // query parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            if (maxDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxDate", maxDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyGain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Daily Gain The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDailyGainAsync (string username, string type, string minDate, string maxDate)
        {
             await GetDailyGainAsyncWithHttpInfo(username, type, minDate, maxDate);

        }

        /// <summary>
        /// Daily Gain The Daily Gain API provides daily gains of users either as a time series or an aggregation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <param name="type">Type of data returned</param>
        /// <param name="minDate">The minimum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <param name="maxDate">The maximum date of the query. The date should be formatted as YYYY-MM-DD</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDailyGainAsyncWithHttpInfo (string username, string type, string minDate, string maxDate)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'minDate' is set
            if (minDate == null)
                throw new ApiException(400, "Missing required parameter 'minDate' when calling DefaultApi->GetDailyGain");
            // verify the required parameter 'maxDate' is set
            if (maxDate == null)
                throw new ApiException(400, "Missing required parameter 'maxDate' when calling DefaultApi->GetDailyGain");

            var localVarPath = "/{Username}/DailyGain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Type", type)); // query parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            if (maxDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxDate", maxDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyGain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Monthly Gain This API retrieves the monthly and yearly gains of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns></returns>
        public void GetGains (string username)
        {
             GetGainsWithHttpInfo(username);
        }

        /// <summary>
        /// Monthly Gain This API retrieves the monthly and yearly gains of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGainsWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetGains");

            var localVarPath = "/{Username}/Gain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Monthly Gain This API retrieves the monthly and yearly gains of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGainsAsync (string username)
        {
             await GetGainsAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// Monthly Gain This API retrieves the monthly and yearly gains of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the gain information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGainsAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetGains");

            var localVarPath = "/{Username}/Gain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Copiers/Live This API returns the number of live copiers by country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns></returns>
        public void GetLiveCopiers (string username)
        {
             GetLiveCopiersWithHttpInfo(username);
        }

        /// <summary>
        /// Copiers/Live This API returns the number of live copiers by country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLiveCopiersWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetLiveCopiers");

            var localVarPath = "/{Username}/Copiers/Live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveCopiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Copiers/Live This API returns the number of live copiers by country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLiveCopiersAsync (string username)
        {
             await GetLiveCopiersAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// Copiers/Live This API returns the number of live copiers by country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we are trying to get the copiers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveCopiersAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetLiveCopiers");

            var localVarPath = "/{Username}/Copiers/Live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveCopiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// RiskScore/Live The Risk Score Live API call returns data on the live customer risk score
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns></returns>
        public void GetLiveRiskScore (string username)
        {
             GetLiveRiskScoreWithHttpInfo(username);
        }

        /// <summary>
        /// RiskScore/Live The Risk Score Live API call returns data on the live customer risk score
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLiveRiskScoreWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetLiveRiskScore");

            var localVarPath = "/{Username}/RiskScore/Live/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// RiskScore/Live The Risk Score Live API call returns data on the live customer risk score
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLiveRiskScoreAsync (string username)
        {
             await GetLiveRiskScoreAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// RiskScore/Live The Risk Score Live API call returns data on the live customer risk score
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveRiskScoreAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetLiveRiskScore");

            var localVarPath = "/{Username}/RiskScore/Live/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// RiskScore/History This API retrieves the historical risk score of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns></returns>
        public void GetRiskHistory (string username, string minDate = null)
        {
             GetRiskHistoryWithHttpInfo(username, minDate);
        }

        /// <summary>
        /// RiskScore/History This API retrieves the historical risk score of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRiskHistoryWithHttpInfo (string username, string minDate = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetRiskHistory");

            var localVarPath = "/{Username}/RiskScore/History";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRiskHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// RiskScore/History This API retrieves the historical risk score of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRiskHistoryAsync (string username, string minDate = null)
        {
             await GetRiskHistoryAsyncWithHttpInfo(username, minDate);

        }

        /// <summary>
        /// RiskScore/History This API retrieves the historical risk score of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the risk score information</param>
        /// <param name="minDate">The minimum date to return information (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRiskHistoryAsyncWithHttpInfo (string username, string minDate = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetRiskHistory");

            var localVarPath = "/{Username}/RiskScore/History";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (minDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDate", minDate)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRiskHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Discovery The API returns discovery values for a specific user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns></returns>
        public void GetUserDiscoveryData (string username, string period = null)
        {
             GetUserDiscoveryDataWithHttpInfo(username, period);
        }

        /// <summary>
        /// Discovery The API returns discovery values for a specific user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserDiscoveryDataWithHttpInfo (string username, string period = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserDiscoveryData");

            var localVarPath = "/{Username}/Discovery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDiscoveryData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Discovery The API returns discovery values for a specific user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserDiscoveryDataAsync (string username, string period = null)
        {
             await GetUserDiscoveryDataAsyncWithHttpInfo(username, period);

        }

        /// <summary>
        /// Discovery The API returns discovery values for a specific user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="period">Requested Period (optional, default to SixMonthsAgo)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserDiscoveryDataAsyncWithHttpInfo (string username, string period = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserDiscoveryData");

            var localVarPath = "/{Username}/Discovery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDiscoveryData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Social/Followers The API returns the number of followers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns></returns>
        public void GetUserFollowers (string username)
        {
             GetUserFollowersWithHttpInfo(username);
        }

        /// <summary>
        /// Social/Followers The API returns the number of followers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserFollowersWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserFollowers");

            var localVarPath = "/{Username}/Social/Followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Social/Followers The API returns the number of followers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserFollowersAsync (string username)
        {
             await GetUserFollowersAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// Social/Followers The API returns the number of followers of a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we want to query</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserFollowersAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserFollowers");

            var localVarPath = "/{Username}/Social/Followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Info This API returns general information on a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns></returns>
        public void GetUserInfo (string username)
        {
             GetUserInfoWithHttpInfo(username);
        }

        /// <summary>
        /// Info This API returns general information on a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserInfoWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserInfo");

            var localVarPath = "/{Username}/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Info This API returns general information on a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserInfoAsync (string username)
        {
             await GetUserInfoAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// Info This API returns general information on a user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username which we would like to get the information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserInfoAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserInfo");

            var localVarPath = "/{Username}/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// PortfolioSummary The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns></returns>
        public void GetUserPortfolioSummary (string username)
        {
             GetUserPortfolioSummaryWithHttpInfo(username);
        }

        /// <summary>
        /// PortfolioSummary The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserPortfolioSummaryWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserPortfolioSummary");

            var localVarPath = "/{Username}/PortfolioSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPortfolioSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// PortfolioSummary The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserPortfolioSummaryAsync (string username)
        {
             await GetUserPortfolioSummaryAsyncWithHttpInfo(username);

        }

        /// <summary>
        /// PortfolioSummary The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserPortfolioSummaryAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserPortfolioSummary");

            var localVarPath = "/{Username}/PortfolioSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPortfolioSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// VisualPortfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns></returns>
        public void GetUserVisualPortfolio (string username, decimal? top)
        {
             GetUserVisualPortfolioWithHttpInfo(username, top);
        }

        /// <summary>
        /// VisualPortfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserVisualPortfolioWithHttpInfo (string username, decimal? top)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserVisualPortfolio");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling DefaultApi->GetUserVisualPortfolio");

            var localVarPath = "/{Username}/VisualPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Top", top)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserVisualPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// VisualPortfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserVisualPortfolioAsync (string username, decimal? top)
        {
             await GetUserVisualPortfolioAsyncWithHttpInfo(username, top);

        }

        /// <summary>
        /// VisualPortfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The requested username</param>
        /// <param name="top">The number of results to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserVisualPortfolioAsyncWithHttpInfo (string username, decimal? top)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserVisualPortfolio");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling DefaultApi->GetUserVisualPortfolio");

            var localVarPath = "/{Username}/VisualPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Top", top)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserVisualPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Discovery This API returns discovery values for multiple users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns></returns>
        public void GetUsersDiscoveryData (string usernames, string period, string fields = null)
        {
             GetUsersDiscoveryDataWithHttpInfo(usernames, period, fields);
        }

        /// <summary>
        /// Multiple Discovery This API returns discovery values for multiple users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUsersDiscoveryDataWithHttpInfo (string usernames, string period, string fields = null)
        {
            // verify the required parameter 'usernames' is set
            if (usernames == null)
                throw new ApiException(400, "Missing required parameter 'usernames' when calling DefaultApi->GetUsersDiscoveryData");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling DefaultApi->GetUsersDiscoveryData");

            var localVarPath = "/Multiple/Discovery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usernames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Usernames", usernames)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersDiscoveryData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Discovery This API returns discovery values for multiple users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUsersDiscoveryDataAsync (string usernames, string period, string fields = null)
        {
             await GetUsersDiscoveryDataAsyncWithHttpInfo(usernames, period, fields);

        }

        /// <summary>
        /// Multiple Discovery This API returns discovery values for multiple users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A comma delimited list of usernames which I would like to get discovery data</param>
        /// <param name="period">Requested Period</param>
        /// <param name="fields">A comma delimited list of fields which should be returned (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersDiscoveryDataAsyncWithHttpInfo (string usernames, string period, string fields = null)
        {
            // verify the required parameter 'usernames' is set
            if (usernames == null)
                throw new ApiException(400, "Missing required parameter 'usernames' when calling DefaultApi->GetUsersDiscoveryData");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling DefaultApi->GetUsersDiscoveryData");

            var localVarPath = "/Multiple/Discovery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usernames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Usernames", usernames)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Period", period)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersDiscoveryData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Info This API returns general information on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns></returns>
        public void GetUsersInfo (string userNames = null)
        {
             GetUsersInfoWithHttpInfo(userNames);
        }

        /// <summary>
        /// Multiple Info This API returns general information on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUsersInfoWithHttpInfo (string userNames = null)
        {

            var localVarPath = "/Multiple/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserNames", userNames)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Info This API returns general information on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUsersInfoAsync (string userNames = null)
        {
             await GetUsersInfoAsyncWithHttpInfo(userNames);

        }

        /// <summary>
        /// Multiple Info This API returns general information on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersInfoAsyncWithHttpInfo (string userNames = null)
        {

            var localVarPath = "/Multiple/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserNames", userNames)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Visual Portfolio This API returns the visual portfolio on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns></returns>
        public void GetUsersVisualPortfolio (string userNames = null)
        {
             GetUsersVisualPortfolioWithHttpInfo(userNames);
        }

        /// <summary>
        /// Multiple Visual Portfolio This API returns the visual portfolio on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUsersVisualPortfolioWithHttpInfo (string userNames = null)
        {

            var localVarPath = "/Multiple/VisualPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserNames", userNames)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersVisualPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Multiple Visual Portfolio This API returns the visual portfolio on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUsersVisualPortfolioAsync (string userNames = null)
        {
             await GetUsersVisualPortfolioAsyncWithHttpInfo(userNames);

        }

        /// <summary>
        /// Multiple Visual Portfolio This API returns the visual portfolio on a list of users
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNames">A comma delimited list of usernames (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersVisualPortfolioAsyncWithHttpInfo (string userNames = null)
        {

            var localVarPath = "/Multiple/VisualPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserNames", userNames)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersVisualPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
