/* 
 * eToro Rates API
 *
 * The Rates API provides eToro live and historical rates
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// History/Candles
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns></returns>
        void GetCandles (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null);

        /// <summary>
        /// History/Candles
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCandlesWithHttpInfo (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null);
        /// <summary>
        /// History/ClosingRate
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns></returns>
        void GetClosingRate (string instrumentIds = null);

        /// <summary>
        /// History/ClosingRate
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetClosingRateWithHttpInfo (string instrumentIds = null);
        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// This API returns live rates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns></returns>
        void GetLiveRates (string instrumentIds = null);

        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// This API returns live rates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLiveRatesWithHttpInfo (string instrumentIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// History/Candles
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCandlesAsync (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null);

        /// <summary>
        /// History/Candles
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCandlesAsyncWithHttpInfo (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null);
        /// <summary>
        /// History/ClosingRate
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetClosingRateAsync (string instrumentIds = null);

        /// <summary>
        /// History/ClosingRate
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClosingRateAsyncWithHttpInfo (string instrumentIds = null);
        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// This API returns live rates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLiveRatesAsync (string instrumentIds = null);

        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// This API returns live rates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveRatesAsyncWithHttpInfo (string instrumentIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// History/Candles &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns></returns>
        public void GetCandles (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null)
        {
             GetCandlesWithHttpInfo(candlePeriodId, instrumentID, top, order);
        }

        /// <summary>
        /// History/Candles &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCandlesWithHttpInfo (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null)
        {
            // verify the required parameter 'candlePeriodId' is set
            if (candlePeriodId == null)
                throw new ApiException(400, "Missing required parameter 'candlePeriodId' when calling DefaultApi->GetCandles");
            // verify the required parameter 'instrumentID' is set
            if (instrumentID == null)
                throw new ApiException(400, "Missing required parameter 'instrumentID' when calling DefaultApi->GetCandles");

            var localVarPath = "/History/Candles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (candlePeriodId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CandlePeriodId", candlePeriodId)); // query parameter
            if (instrumentID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentID", instrumentID)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Top", top)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// History/Candles &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCandlesAsync (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null)
        {
             await GetCandlesAsyncWithHttpInfo(candlePeriodId, instrumentID, top, order);

        }

        /// <summary>
        /// History/Candles &lt;br&gt;The History Candles API retrieves historical candles per instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="candlePeriodId">The internal ID of the candle interval. For the full values see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\&quot;&gt;Candle Periods API&lt;/a&gt;</param>
        /// <param name="instrumentID">The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt;</param>
        /// <param name="top">The number of candles to return. If omitted we will return 100 candles (optional)</param>
        /// <param name="order">The order of the candles returned. If omitted it will be returned in a descending order (optional, default to DESC)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCandlesAsyncWithHttpInfo (decimal? candlePeriodId, decimal? instrumentID, decimal? top = null, string order = null)
        {
            // verify the required parameter 'candlePeriodId' is set
            if (candlePeriodId == null)
                throw new ApiException(400, "Missing required parameter 'candlePeriodId' when calling DefaultApi->GetCandles");
            // verify the required parameter 'instrumentID' is set
            if (instrumentID == null)
                throw new ApiException(400, "Missing required parameter 'instrumentID' when calling DefaultApi->GetCandles");

            var localVarPath = "/History/Candles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (candlePeriodId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CandlePeriodId", candlePeriodId)); // query parameter
            if (instrumentID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentID", instrumentID)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Top", top)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// History/ClosingRate &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns></returns>
        public void GetClosingRate (string instrumentIds = null)
        {
             GetClosingRateWithHttpInfo(instrumentIds);
        }

        /// <summary>
        /// History/ClosingRate &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetClosingRateWithHttpInfo (string instrumentIds = null)
        {

            var localVarPath = "/History/ClosingRate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClosingRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// History/ClosingRate &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetClosingRateAsync (string instrumentIds = null)
        {
             await GetClosingRateAsyncWithHttpInfo(instrumentIds);

        }

        /// <summary>
        /// History/ClosingRate &lt;br&gt;The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.&lt;br&gt; &lt;li&gt;&lt;b&gt;Daily&lt;/b&gt; The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time&lt;/li&gt; &lt;li&gt;&lt;b&gt;Weekly&lt;/b&gt; The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC&lt;/li&gt; &lt;li&gt;&lt;b&gt;Monthly&lt;/b&gt; The monthly closing price is updated on the 1st of each month &lt;/li&gt; &lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetClosingRateAsyncWithHttpInfo (string instrumentIds = null)
        {

            var localVarPath = "/History/ClosingRate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClosingRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Live This API returns live rates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns></returns>
        public void GetLiveRates (string instrumentIds = null)
        {
             GetLiveRatesWithHttpInfo(instrumentIds);
        }

        /// <summary>
        /// Live This API returns live rates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLiveRatesWithHttpInfo (string instrumentIds = null)
        {

            var localVarPath = "/Live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Live This API returns live rates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLiveRatesAsync (string instrumentIds = null)
        {
             await GetLiveRatesAsyncWithHttpInfo(instrumentIds);

        }

        /// <summary>
        /// Live This API returns live rates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentIds">A comma delimited list of instrument ids. For the full list of instrument IDs refer to the &lt;a href&#x3D;\&quot;/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\&quot;&gt;Instruments API&lt;/a&gt; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveRatesAsyncWithHttpInfo (string instrumentIds = null)
        {

            var localVarPath = "/Live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InstrumentIds", instrumentIds)); // query parameter
            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
            // authentication (apiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subscription-key", this.Configuration.GetApiKeyWithPrefix("subscription-key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
